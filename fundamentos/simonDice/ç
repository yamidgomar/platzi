// 4) Las obtenemos de manera global.Estas funciones recibiran un string con el id del elemento a obtener btnempezar, celest,violeta,naranja,verde.
const btnEmpezar = document.getElementById("btnEmpezar")
const celeste = document.getElementById("celeste")
const violeta = document.getElementById("violeta")
const naranja = document.getElementById("naranja")
const verde = document.getElementById("verde")


class Juego{
    constructor(){
        this.inicializar()
        this.generarSecuencia()
    }

    inicializar(){
        btnEmpezar.classList.add('hide')
        this.nivel = 1
        this.colores = {
            celeste,
            violeta,
            naranja,
            verde
        }

    }

    generarSecuencia(){
        this.secuencia = new Array(10).fill(0).map(n => Math.floor(Math.random() * 4))
    }
}

function empezarJuego(){
    window.juego = new Juego()
}



//1) Definimos la funcion empezar el juego, inicializamos el Juego()
// 2) construimos la clase Juego, no le pasamos ningun parametro, pero inicializamos el juego, tendra la logica del juego.
//3) Primero a√±adira la clase hide al elemento con id btnEmpezar.
    /*4) 
     Luego de llamar inicializar llamamos a generarsecuenci.
     Difiniremos la secuencia en un atributo nuevo secuencia, 
     lo definimos aunque no exista y se guardara internamente en el objeto del juego.
     Generamos un Array de numeros random 
        new Array(10).fill(0).map(Math.floor(Math.random() * 4))

        Array(10) 10 elementos, es importante .fill, 
        por que al llamar a map los valores del array deben estar definidos y tener algun valor 
        aunque ese valor sea 0. Retornamos un map.random multiplicado por 4(obtenemos valores decimales desde cero a 4 sin llegar a ser 4), nos quedamos con la parte entera con Math.floor(redondeamos hacia abajo).

5) Ponemos la variable en el objeto window, para debuggerarla y ver lo que esta ppasando por consola
    */
